
#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>

typedef struct node
{
    int data;
    bool mark;
    int ref_count=0;
    struct node *next_1;
    struct node *next_2;
    struct node *next_3;
    
}Node;

 Node *pointer_array[10];

void display_node(int i)
{
	printf("value=%d\t freed_size=%d\n  reference_count=%d\t",pointer_array[i]->data,sizeof(Node),pointer_array[i]->ref_count);
}


void display_all_nodes(Node* root)
{
	if(root!=NULL)
	{
		printf("value=%d:ref_count=%d\n",root->data,root->ref_count);
	}
	if(root==NULL)
	{
		return;
	}
	display_all_nodes(root->next_1);
	display_all_nodes(root->next_2);
	display_all_nodes(root->next_3);
}

void adjacency_list()
{
	int i=0;
	for(i=0;i<10;i++)
	{
		if(pointer_array[i]!=NULL)
		{
			printf("Value=%d: ",pointer_array[i]->data);
			if(pointer_array[i]->next_1!=NULL)
			{
				printf("%d ->",pointer_array[i]->next_1->data);
			}
			if(pointer_array[i]->next_2!=NULL)
			{
				printf("%d ->",pointer_array[i]->next_2->data);
			}
			if(pointer_array[i]->next_3!=NULL)
			{
				printf("%d ->",pointer_array[i]->next_3->data);
			}
			printf("NULL\n");
		}
	}
}


void garbage_collection_ref_counting(Node* root)
{
	int i=0;
	while(i<10)
	{
		if(root_is_present(root,pointer_array[i])==0 )
		{		
			if(pointer_array[i]->next_1!=NULL)
			{
				pointer_array[i]->next_1->ref_count-=1;
			}
			if(pointer_array[i]->next_2!=NULL)
			{
				pointer_array[i]->next_2->ref_count-=1;
			}
			if(pointer_array[i]->next_3!=NULL)
			{
				pointer_array[i]->next_3->ref_count-=1;
			}
			printf("Garbage:");
			display_node(i);
			free(pointer_array[i]);
			pointer_array[i]=NULL;
		}
		 i++;		
	}
	 
}

void adjacency_Matrix()
{
	int adm[10][10];
	int i,j,k;
	
	for(i=0;i<10;i++)		
	{
		for(j=0;j<10;j++)
		{
			adm[i][j]=0;
		}	
	}
	
	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
		{
			
		if(pointer_array[j]!=NULL&&pointer_array[i]!=NULL)
		{
			
			if(pointer_array[i]->next_1!=NULL)
			{
				if(pointer_array[i]->next_1->data==pointer_array[j]->data&&i!=j)
				{
					adm[i][j]=1;
				}
			}
			if(pointer_array[i]->next_2!=NULL)
			{
				if(pointer_array[i]->next_2->data==pointer_array[j]->data&&i!=j)
				{
					adm[i][j]=1;
				}
			}
			if(pointer_array[i]->next_3!=NULL)
			{
				if(pointer_array[i]->next_3->data==pointer_array[j]->data&&i!=j)
				{
					adm[i][j]=1;
				}
			}
		}
		
		}
	}
	
	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
		{
			printf("%d ",adm[i][j]);
		}
		printf("\n");
	}
}

void mark_the_Nodes(Node*root,int i,int j)
{
    Node *current, *pre;

    current = root;
        
    while (current != NULL) 
    {
  
        if (current->next_1== NULL) 
        {
            current->mark=true;
            current = current->next_2;
        }   
        else 
        {
            pre = current->next_1;
            while ((pre->next_2 != NULL) && (pre->next_2 != current))
            {
            	pre = pre->next_2;
			}
                
            if (pre->next_2 == NULL) 
            {
                pre->next_2 = current;
                current = current->next_1;
            }
            else 
            {
                pre->next_2 = NULL;
                current->mark=true;
                current = current->next_2;
            } 
        }
    }   
    
    current = root;
        
    while (current != NULL) 
    {
  
        if (current->next_1== NULL) 
        {
            current->mark=true;
            current = current->next_3;
        }   
        else 
        {
            pre = current->next_1;
            while ((pre->next_3 != NULL) && (pre->next_3 != current))
            {
            	pre = pre->next_3;
			}
                
            if (pre->next_3 == NULL) 
            {
                pre->next_3 = current;
                current = current->next_1;
            }
            else 
            {
                pre->next_3 = NULL;
                current->mark=true;
                current = current->next_3;
            } 
        }
    }  
    
}

void mark_method(Node* root)
{
	
	if(root!=NULL)
	{
		root->mark=true;
	}
	if(root==NULL)
	{
		return;
	}
	mark_method(root->next_1);
	mark_method(root->next_2);
	mark_method(root->next_3);
}

void sweep_method()
{
	int i;
	for(i=0;i<10;i++)
	{
		if(pointer_array[i]->mark==false)
		{
			if(pointer_array[i]->next_1!=NULL)
			{
				pointer_array[i]->next_1->ref_count-=1;
			}
			if(pointer_array[i]->next_2!=NULL)
			{
				pointer_array[i]->next_2->ref_count-=1;
			}
			if(pointer_array[i]->next_3!=NULL)
			{
				pointer_array[i]->next_3->ref_count-=1;
			}
			printf("Garbage:");
			display_node(i);
			free(pointer_array[i]);
			pointer_array[i]=NULL;
		}
	}
}
